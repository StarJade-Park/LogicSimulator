#pragma once
//조상 클래스 추가
#include "ComponentObject.h"

//논리 게이트 헤더 헤더추가
#include "ANDGateComponet.h"
#include "ORGateComponent.h"
#include "NANDGateComponent.h"
#include "NORGateComponent.h"
#include "NOTGateComponent.h"
#include "XORGateComponent.h"

//와이어 헤더 추가
#include "WireComponet.h" 

//input component 헤더 추가
#include "InputPinComponent.h"
#include "ClockComponent.h"
#include "OneBitSwitch.h"

//output pin 헤더 추가
#include "OutputPin.h"
#include "7SegmentComponent.h"
#include "OneBitLampComponent.h"


#include <vector>
#include <queue>


//디버깅용 출력하는거
#include <stdio.h>





#define VECTOR_INIT_SIZE 10

//추가할 component의 구조체 
struct COMPONENT_INFO {
	COMPONENT_INFO() {
		componentID = 0;
		componentType = COMPONENT_TYPE_NONE;
	}
	COMPONENT_INFO(COMPONENT_TYPE type) {
		componentID = 0;
		componentType = type;
	}
	COMPONENT_ID componentID;
	COMPONENT_TYPE componentType;
};


//보류
//세이브 로드 할 구조체
struct LIBRARY_BOX_DATA {
	LIBRARY_BOX_DATA() {

	}
	COMPONENT_ID componentID;
	COMPONENT_TYPE componentType;


	//CSimulatorObject 정보
	std::string componentName;
	int numberOfInputTerminal;
	int numberOfOutputTerminal;

	//CComponentObject 정보
	int x, y;
	enum DIRECTION direction;
	std::string label;


};


class CLibraryBox :public CComponentObject {
private:
	//부품들을 담을 벡터 객체들
	std::vector<CSimulatorObject*> componentVector;

	//라이브러리 박스의 인풋핀과 아웃풋 핀을 저장하는 벡터 리스트
	std::vector<COMPONENT_ID> inputPinIDVector;
	std::vector<COMPONENT_ID> outputPinIDVector;

	//부품간을 연결나타내는 무방향 그래프의 인접리스트 
	std::vector<std::vector<COMPONENT_CONENTION_INFO>> connnectionGraph;

	//부품에 어떤 단자가 사용중인지 알려주는 이차원 벡터
	std::vector<std::vector<COMPONENT_CONENTION_INFO>> connectedTerminalInfo;
	
	//부품들이 가지는 타입을 저장하는 벡터
	std::vector< COMPONENT_TYPE >  componentTypeVector;

	//부품들의 아이디를 저장하는 벡터
	std::vector < bool > componentIDVector;


public:
	CLibraryBox();
	CLibraryBox(CLibraryBox& object);
	~CLibraryBox();
	

	//부품의 아이디를 만들어줌
	COMPONENT_ID makeNewComponetID(COMPONENT_TYPE componentType);
	//부품의 아이디를 삭제함
	void deleteComponentID(COMPONENT_ID deleteId);
	
	//라이브러리 박스를 로드함
	void loadLibrarybox(std::vector<LIBRARY_BOX_DATA>& LibraryBoxData);
	//라이브러리 박스를 세이브함
	void saveLibrarybox(std::vector<LIBRARY_BOX_DATA>& _componentList);

	//인풋 핀 하나에대한 getter,setter
	void setSingleInputPinValue(bool _inputValue, int _inputPinNumber);
	bool getSingleInputPinValue(int _inputPinNumber);
	//아웃풋 핀 하나에대한 getter
	bool getSingleOutputPinValue(int _outputPinNumber);
	
	//부품 추가 실패시 false 반환
	bool addComponent(COMPONENT_INFO& componentInfo);	
	//부품삭제
	bool deleteComponent(COMPONENT_ID componentID);
	
	//연결되지않은 부품과 와이어를 연결함
	bool connectComponentAndWire(COMPONENT_CONENTION_INFO& ComponentInfo, COMPONENT_CONENTION_INFO& wireInfo);
	//와이어와 연결된 부품을 분리함
	bool disconnectComponentAndWire(COMPONENT_CONENTION_INFO& ComponentInfo, COMPONENT_CONENTION_INFO& wireInfo);
	//wireA 에 juntion을 만들고 거기 에다가 wireB를 연결함
	bool connectWireAndWire(COMPONENT_CONENTION_INFO& wireA, COMPONENT_CONENTION_INFO& wireB);
	//wireA 에 juntion을 제거하고 wireB를 분리함
	bool disconnectWireAndWire(COMPONENT_CONENTION_INFO& wireA, COMPONENT_CONENTION_INFO& wireB);

	//라이브러리 박스 내부회로 갱신 
	bool updateCircuit();
	
	//보여주기여용 상태 정보 출력해주는 프로그램
	void printstatus();

};